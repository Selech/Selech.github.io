precision mediump float;

// light position in view space
uniform vec3 lPos;
// emitted light
uniform vec3 Le;
uniform sampler2D shadowMap;
uniform float storeDepth; // whether or not to store the depth in the alpha component

varying vec3 fPosition;
varying vec4 posFromLight;
varying vec3 fNormal;
varying vec3 fColor;

void main()
{
    // stores the depth in the alpha value
    float alpha = storeDepth > 0.5 ? length(fPosition) / 200.0 : 1.0;

    // distance to light
    float dist = length(lPos - fPosition);
    // direction to light
    vec3 l = normalize(lPos - fPosition);
    // normal
    vec3 n = normalize(fNormal);
    // attenuation
    float att = dist * dist;

    // calculate the coordinate in the shadow map and find shadow depth
      vec3 shadowCoord = (posFromLight.xyz / posFromLight.w) / 2.0 + 0.5;
      float depth = (texture2D(shadowMap, shadowCoord.xy)).x;
      // check if pixel is in shadow
      float visibility = (shadowCoord.z > depth + 0.005) ? 0.4 : 1.0;

    // calculate diffuse intensity
    vec3 Kd = fColor;
    vec3 Id = Le * Kd * max(dot(l, n), 0.0) / att;
    vec3 ambient = vec3(0.05);

    gl_FragColor = vec4(visibility * Id + ambient, alpha);
}